{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#------------------------------\n",
    "# Copyright Anna Mederer 2021 :D\n",
    "# Coded in Python 3.0\n",
    "#------------------------------\n",
    "\n",
    "# Resistor value and uncertainty\n",
    "R = 22000\n",
    "Ru = R * 0.05\n",
    "\n",
    "\n",
    "# Theoretical capacitor values and uncertainty\n",
    "C1t = 0.0002 #capacitor 1 theoretical value\n",
    "C1t_u = C1t * 0.1 #capacitor 1 theoretical uncertainty (or tolerance)\n",
    "\n",
    "C2t = 0.000051 #capacitor 2 theoretical value\n",
    "C2t_u = C2t * 0.2 #capacitor 2 theoretical uncertainty (or tolerance)\n",
    "\n",
    "\n",
    "# C parameter values from LoggerPro\n",
    "p1 = 5.0 # capacitor 1 experimental C parameter\n",
    "p2 = 0.97 # capacitor 2 experimental C parameter\n",
    "\n",
    "ps = 5.0 # Two capacitors in series experimental C parameter\n",
    "pp = 0.7 # Two capacitors in parallel experimental C parameter\n",
    "\n",
    "# C parameter uncertainty values from LoggerPro\n",
    "p_u1 = 0.0011 # capacitor 1 experimental uncertainty \n",
    "p_u2 = 0.0010 # capacitor 2 experimental uncertainty \n",
    "\n",
    "p_us = 0.0010 # capacitors in parallel experimental uncertainty \n",
    "p_up = 0.0010 # capacitors in series experimental uncertainty "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculations are below\n",
    "\n",
    "## Parallel capacitor theoretical calculations\n",
    "$C_{parallel} = C_1 + C_2$, where $C_1$ is the first capacitor, and $C_2$ is the second capacitor. \n",
    "\n",
    "## Parallel capacitor uncertainty theoretical calculation \n",
    "$Cu_{parallel} = C_{1u} + C_{2u}$, where $Cu_{parallel}$ is the parallel uncertainty, $C_{1u}$ is the uncertainty of the first capactior, and $C_{2u}$ is the uncertainty of the second capacitor. \n",
    "\n",
    "## Series Capacitor theoretical calculations\n",
    "\n",
    "$ \\frac{1}{C_{series}} = \\frac{1}{C_1} + \\frac{1}{C_2}$ , where $C_1$ is the first capacitor, and $C_2$ is the second capacitor.\n",
    "\n",
    "## Series Capacitor uncertainty theoretical calculations\n",
    "\n",
    "$Cu_{series} = \\frac{(C_2) ^2} { (C_1 + C_2)^2} *C_{1u} + \\frac{ (C_1)^2}{ (C_1 + C_2)^2}*C_{2u}$, where $Cu_{series}$ is the series uncertainty, $C_{1u}$ is the uncertainty of the first capactior, and $C_{2u}$ is the uncertainty of the second capacitor. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cap 1 experimental = 9.881 +/- 0.496 uF\n",
      "Cap 2 experimental = 46.86 +/- 2.401 uF\n",
      "Cap Series experimental = 9.091 +/- 0.456 uF\n",
      "Cap Parallel experimental = 64.935 +/- 3.34 uF\n",
      "\n",
      "Cap 1 theoretical = 200.0 +/- 20.0 uF\n",
      "Cap 2 theoretical = 51.0 +/- 10.2 uF\n",
      "Cap Series theoretical = 40.637 +/- 7.302 uF\n",
      "Cap Parallel theoretical = 251.0 +/- 30.2 uF\n"
     ]
    }
   ],
   "source": [
    "# Series and parallel capacitor equations\n",
    "Cpt = C1t + C2t\n",
    "Cst = 1/(1/C1t + 1/C2t)\n",
    "\n",
    "# Functions\n",
    "def calcCap(parameter): # calculate capacitance from the C parameter\n",
    "    return 1 / (R*parameter)\n",
    "\n",
    "def uncerMD(A, x, dx, y, dy): # calculate the uncertainty for measurements with * or /\n",
    "    return (dx/x +dy/y)*A\n",
    "\n",
    "def showCap(cap, uncer, name): # print the capacitance and uncertainty in microFarads\n",
    "    print(\"Cap\", name, \"=\", (round(cap/0.000001, 3)), \"+/-\", (round(uncer/0.000001, 3)), \"uF\")\n",
    "    return\n",
    "\n",
    "# Calculate experimental capacitance\n",
    "C1e = calcCap(p1)\n",
    "C2e = calcCap(p2)\n",
    "Cse = calcCap(ps)\n",
    "Cpe = calcCap(pp)\n",
    "\n",
    "# Calculate experimental uncertainty\n",
    "C1eu = uncerMD(C1e, R, Ru, p1, p_u1)\n",
    "C2eu = uncerMD(C2e, R, Ru, p2, p_u2)\n",
    "Cseu = uncerMD(Cse, R, Ru, ps, p_up)\n",
    "Cpeu = uncerMD(Cpe, R, Ru, pp, p_us)\n",
    "\n",
    "\n",
    "# Calculate theoretical series and parallel uncertainty\n",
    "Cst_u = ((C2t)**2 / (C1t + C2t)**2)*C1t_u + ((C1t)**2 / (C1t + C2t)**2)*C2t_u\n",
    "\n",
    "# Parallel theoretical uncertainty \n",
    "Cpt_u = C1t_u + C2t_u\n",
    "\n",
    "# show experimental capacitor values\n",
    "showCap(C1e, C1eu, \"1 experimental\")\n",
    "showCap(C2e, C2eu, \"2 experimental\")\n",
    "showCap(Cse, Cseu, \"Series experimental\")\n",
    "showCap(Cpe, Cpeu, \"Parallel experimental\")\n",
    "print()\n",
    "\n",
    "# show theoretical capacitor values\n",
    "showCap(C1t, C1t_u, \"1 theoretical\")\n",
    "showCap(C2t, C2t_u, \"2 theoretical\")\n",
    "showCap(Cst, Cst_u, \"Series theoretical\")\n",
    "showCap(Cpt, Cpt_u, \"Parallel theoretical\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
